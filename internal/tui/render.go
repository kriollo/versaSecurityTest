package tui

import (
	"fmt"
	"strings"
	"time"

	"github.com/charmbracelet/lipgloss"
)

// renderHeader renderiza el header de la aplicaci√≥n
func (m Model) renderHeader() string {
	banner := `
‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë
 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`

	title := headerStyle.Render("üîê VersaSecurityTest - Interactive Web Security Scanner v2.0")

	return banner + "\n\n" + title
}

// renderProtocolStep renderiza el paso de selecci√≥n de protocolo
func (m Model) renderProtocolStep() string {
	var sb strings.Builder

	sb.WriteString(titleStyle.Render("PASO 1: SELECCI√ìN DE PROTOCOLO"))
	sb.WriteString("\n\n")
	sb.WriteString("Seleccione el protocolo a usar:\n\n")

	// Opci√≥n HTTPS
	httpsMarker := "[ ]"
	if m.useHTTPS {
		httpsMarker = "[X]"
	}
	httpsStyle := normalStyle
	if m.useHTTPS {
		httpsStyle = focusedStyle
	}
	sb.WriteString(httpsStyle.Render(fmt.Sprintf("%s HTTPS (Recomendado)", httpsMarker)))
	sb.WriteString("\n")

	// Opci√≥n HTTP
	httpMarker := "[ ]"
	if !m.useHTTPS {
		httpMarker = "[X]"
	}
	httpStyle := normalStyle
	if !m.useHTTPS {
		httpStyle = focusedStyle
	}
	sb.WriteString(httpStyle.Render(fmt.Sprintf("%s HTTP", httpMarker)))
	sb.WriteString("\n\n")

	sb.WriteString("üí° Consejo: HTTPS es m√°s seguro y se recomienda para sitios de producci√≥n.\n")
	sb.WriteString("   Use HTTP solo para desarrollo local (localhost).\n")

	return sb.String()
}

// renderURLStep renderiza el paso de entrada de URL
func (m Model) renderURLStep() string {
	var sb strings.Builder

	sb.WriteString(titleStyle.Render("PASO 2: INGRESO DE URL"))
	sb.WriteString("\n\n")

	protocol := "https://"
	if !m.useHTTPS {
		protocol = "http://"
	}

	sb.WriteString(fmt.Sprintf("Protocolo seleccionado: %s\n\n", successStyle.Render(protocol)))
	sb.WriteString("Ingrese la URL objetivo (sin protocolo):\n")
	sb.WriteString("Ejemplos: localhost:8080, www.ejemplo.com, api.ejemplo.com/v1\n\n")

	// Campo de entrada
	urlField := lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("#7D56F4")).
		Padding(0, 1).
		Width(50)

	fullURL := protocol + m.url
	if m.url == "" {
		fullURL = protocol + "‚ñã" // Cursor
	} else {
		fullURL += "‚ñã" // Cursor al final
	}

	sb.WriteString(urlField.Render(fullURL))
	sb.WriteString("\n\n")

	if m.url != "" {
		sb.WriteString(fmt.Sprintf("URL completa: %s\n", successStyle.Render(protocol+m.url)))
	}

	return sb.String()
}

// renderTestsStep renderiza el paso de selecci√≥n de tests en columnas compactas
func (m Model) renderTestsStep() string {
	var sb strings.Builder

	sb.WriteString(titleStyle.Render("PASO 3: SELECCI√ìN DE TESTS DE SEGURIDAD OWASP"))
	sb.WriteString("\n\n")

	selectedCount := 0
	recommendedCount := 0
	for _, test := range m.tests {
		if test.Selected {
			selectedCount++
		}
		if test.Recommended {
			recommendedCount++
		}
	}

	url := "https://"
	if !m.useHTTPS {
		url = "http://"
	}
	url += m.url

	sb.WriteString(fmt.Sprintf("üéØ URL objetivo: %s\n", successStyle.Render(url)))
	sb.WriteString(fmt.Sprintf("üìä Tests seleccionados: %s | Recomendados: %d\n\n",
		successStyle.Render(fmt.Sprintf("%d/%d", selectedCount, len(m.tests))), recommendedCount))

	// Renderizar tests en columnas compactas
	sb.WriteString(m.renderTestsInColumns())

	// Mostrar descripci√≥n del test enfocado
	if m.cursor >= 0 && m.cursor < len(m.tests) {
		focusedTest := m.tests[m.cursor]
		sb.WriteString("\n")
		sb.WriteString(warningStyle.Render("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
		sb.WriteString("\n")
		sb.WriteString(warningStyle.Render(fmt.Sprintf("üìã %s", focusedTest.Description)))
		sb.WriteString("\n")
		sb.WriteString(warningStyle.Render(fmt.Sprintf("üè∑Ô∏è Categor√≠a: %s (%s)", focusedTest.Category, getCategoryDescription(focusedTest.Category))))
		sb.WriteString("\n")
		sb.WriteString(warningStyle.Render("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
		sb.WriteString("\n")
	}

	sb.WriteString("\n")
	if m.verbose {
		sb.WriteString("üîç Modo verbose: " + successStyle.Render("ACTIVADO") + " (mostrar√° detalles completos)\n")
	} else {
		sb.WriteString("üîç Modo verbose: DESACTIVADO (presione 'v' para activar)\n")
	}

	sb.WriteString("üí° Atajos: [SPACE] Seleccionar | [A] Todos | [N] Ninguno | [R] Recomendados | [V] Verbose\n")
	sb.WriteString("   ‚≠ê = Recomendado | ‚òë = Seleccionado | ‚Üí = Cursor actual\n")

	return sb.String()
}

// getCategoryDescription devuelve una descripci√≥n breve de la categor√≠a OWASP
func getCategoryDescription(category string) string {
	descriptions := map[string]string{
		"INFO": "Recolecci√≥n de Info",
		"CONF": "Configuraci√≥n",
		"IDNT": "Identidad",
		"ATHN": "Autenticaci√≥n",
		"ATHZ": "Autorizaci√≥n",
		"SESS": "Sesiones",
		"INPV": "Validaci√≥n Entrada",
		"ERRH": "Manejo Errores",
		"CRYP": "Criptograf√≠a",
		"BUSL": "L√≥gica Negocio",
		"CLNT": "Cliente",
		"APIT": "APIs",
		"MISC": "Adicionales",
	}

	if desc, exists := descriptions[category]; exists {
		return desc
	}
	return "Otros"
}

// getGlobalTestIndex encuentra el √≠ndice global de un test por su ID
func getGlobalTestIndex(tests []TestItem, id string) int {
	for i, test := range tests {
		if test.ID == id {
			return i
		}
	}
	return -1
}

// renderFormatStep renderiza el paso de selecci√≥n de formato
func (m Model) renderFormatStep() string {
	var sb strings.Builder

	sb.WriteString(titleStyle.Render("PASO 4: FORMATO DE SALIDA"))
	sb.WriteString("\n\n")

	for i, format := range m.formats {
		checkbox := "[ ]"
		if format.Selected {
			checkbox = "[X]"
		}

		style := normalStyle
		if m.cursor == i {
			style = focusedStyle
		} else if format.Selected {
			style = selectedStyle
		}

		line := fmt.Sprintf("%s %s", checkbox, format.Name)
		sb.WriteString(style.Render(line))
		sb.WriteString("\n")

		if m.cursor == i {
			desc := fmt.Sprintf("   üìù %s", format.Description)
			sb.WriteString(warningStyle.Render(desc))
			sb.WriteString("\n")
		}
		sb.WriteString("\n")
	}

	// Configuraciones adicionales
	sb.WriteString(titleStyle.Render("CONFIGURACIONES ADICIONALES"))
	sb.WriteString("\n\n")

	verboseCheckbox := "[ ]"
	if m.verbose {
		verboseCheckbox = "[X]"
	}
	verboseStyle := normalStyle
	if m.verbose {
		verboseStyle = selectedStyle
	}
	sb.WriteString(verboseStyle.Render(fmt.Sprintf("%s Modo Verbose (mostrar detalles adicionales)", verboseCheckbox)))
	sb.WriteString("\n\n")

	sb.WriteString("üí° Presione [V] para activar/desactivar el modo verbose en cualquier momento\n")

	return sb.String()
}

// renderConfirmStep renderiza el paso de confirmaci√≥n
func (m Model) renderConfirmStep() string {
	var sb strings.Builder

	sb.WriteString(titleStyle.Render("PASO 5: CONFIRMACI√ìN"))
	sb.WriteString("\n\n")

	// Resumen de configuraci√≥n
	protocol := "https://"
	if !m.useHTTPS {
		protocol = "http://"
	}

	sb.WriteString("üìã RESUMEN DE CONFIGURACI√ìN:\n")
	sb.WriteString(strings.Repeat("‚îÄ", 50) + "\n")
	sb.WriteString(fmt.Sprintf("üéØ URL Objetivo:     %s\n", successStyle.Render(protocol+m.url)))

	selectedTests := []string{}
	for _, test := range m.tests {
		if test.Selected {
			selectedTests = append(selectedTests, test.Name)
		}
	}
	sb.WriteString(fmt.Sprintf("üîç Tests (%d):        %s\n", len(selectedTests), strings.Join(selectedTests[:min(3, len(selectedTests))], ", ")))
	if len(selectedTests) > 3 {
		sb.WriteString(fmt.Sprintf("                     ... y %d m√°s\n", len(selectedTests)-3))
	}

	selectedFormat := ""
	for _, format := range m.formats {
		if format.Selected {
			selectedFormat = format.Name
			break
		}
	}
	sb.WriteString(fmt.Sprintf("üìä Formato:          %s\n", selectedFormat))
	sb.WriteString(fmt.Sprintf("üîç Modo Verbose:     %v\n", m.verbose))
	sb.WriteString(strings.Repeat("‚îÄ", 50) + "\n\n")

	// Opciones de confirmaci√≥n
	confirmStyle := normalStyle
	cancelStyle := normalStyle

	if m.cursor == 0 {
		confirmStyle = focusedStyle
	} else {
		cancelStyle = focusedStyle
	}

	sb.WriteString("¬øDesea proceder con el escaneo?\n\n")
	sb.WriteString(confirmStyle.Render("[ ] ‚úÖ Confirmar y ejecutar escaneo"))
	sb.WriteString("\n")
	sb.WriteString(cancelStyle.Render("[ ] ‚ùå Cancelar y volver atr√°s"))
	sb.WriteString("\n")

	return sb.String()
}

// renderScanningStep renderiza el paso de escaneo en progreso
func (m Model) renderScanningStep() string {
	var sb strings.Builder

	sb.WriteString(titleStyle.Render("üöÄ ESCANEO EN PROGRESO"))
	sb.WriteString("\n\n")

	protocol := "https://"
	if !m.useHTTPS {
		protocol = "http://"
	}

	sb.WriteString(fmt.Sprintf("üéØ Escaneando: %s\n\n", successStyle.Render(protocol+m.url)))

	// Barra de progreso general
	if m.scanProgress.Total > 0 {
		progress := float64(m.scanProgress.Completed) / float64(m.scanProgress.Total)
		barWidth := 50
		filled := int(progress * float64(barWidth))

		bar := strings.Repeat("‚ñà", filled) + strings.Repeat("‚ñë", barWidth-filled)
		sb.WriteString(fmt.Sprintf("üìä Progreso: [%s] %.1f%%\n", bar, progress*100))
		sb.WriteString(fmt.Sprintf("‚úÖ Tests completados: %d/%d\n", m.scanProgress.Completed, m.scanProgress.Total))

		// Tiempo total transcurrido
		if m.scanProgress.Duration > 0 {
			sb.WriteString(fmt.Sprintf("‚è±Ô∏è  Tiempo transcurrido: %v\n", m.scanProgress.Duration.Round(time.Second)))
		}
		sb.WriteString("\n")
	}

	// Lista completa de tests con estado visual mejorado
	sb.WriteString("üìã ESTADO DE LOS TESTS:\n")
	sb.WriteString(strings.Repeat("‚îÄ", 70) + "\n")

	// Si no hay detalles de tests, crear la lista basada en los tests seleccionados
	if len(m.scanProgress.TestDetails) == 0 {
		// Generar lista inicial de tests pendientes
		for _, test := range m.tests {
			if test.Selected {
				sb.WriteString(fmt.Sprintf("‚è≥ %s %s\n",
					normalStyle.Render("[ PENDIENTE ]"),
					test.Name))
			}
		}
	} else {
		// Mostrar estado real de cada test
		for i, test := range m.scanProgress.TestDetails {
			var statusIcon, statusText string
			var statusStyle lipgloss.Style

			switch test.Status {
			case "completed":
				statusIcon = "‚úÖ"
				statusText = "[ COMPLETADO ]"
				statusStyle = successStyle
			case "failed":
				statusIcon = "‚ùå"
				statusText = "[   FALLIDO  ]"
				statusStyle = errorStyle
			case "running":
				statusIcon = "üîÑ"
				statusText = "[ EJECUTANDO ]"
				statusStyle = warningStyle
			case "pending":
				statusIcon = "‚è≥"
				statusText = "[ PENDIENTE  ]"
				statusStyle = normalStyle
			default:
				statusIcon = "‚ö™"
				statusText = "[  ESPERANDO ]"
				statusStyle = normalStyle
			}

			// L√≠nea principal del test
			line := fmt.Sprintf("%s %s %s",
				statusIcon,
				statusStyle.Render(statusText),
				test.Name)

			// Agregar duraci√≥n si est√° disponible
			if test.Duration > 0 {
				line += fmt.Sprintf(" %s",
					normalStyle.Render(fmt.Sprintf("(%v)", test.Duration.Round(time.Millisecond))))
			}

			sb.WriteString(line)
			sb.WriteString("\n")

			// Mostrar mensaje adicional si existe
			if test.Message != "" && m.verbose {
				sb.WriteString(fmt.Sprintf("   üí¨ %s\n",
					normalStyle.Render(test.Message)))
			}

			// Agregar una l√≠nea en blanco cada 5 tests para mejor legibilidad
			if (i+1)%5 == 0 && i < len(m.scanProgress.TestDetails)-1 {
				sb.WriteString("\n")
			}
		}
	}

	sb.WriteString(strings.Repeat("‚îÄ", 70) + "\n")

	// Test actualmente ejecut√°ndose (destacado)
	if m.scanProgress.CurrentTest != "" {
		sb.WriteString("\nüîç TEST ACTUAL:\n")
		sb.WriteString(fmt.Sprintf("   %s %s\n",
			warningStyle.Render("üîÑ EJECUTANDO ‚Üí"),
			warningStyle.Render(m.scanProgress.CurrentTest)))
		if m.scanProgress.CurrentTestTime > 0 {
			sb.WriteString(fmt.Sprintf("   ‚è±Ô∏è  Duraci√≥n: %v\n",
				m.scanProgress.CurrentTestTime.Round(time.Millisecond)))
		}
	}

	// Controles
	sb.WriteString("\nüí° CONTROLES:\n")
	sb.WriteString("   [Q] Cancelar escaneo | [V] Toggle verbose | [D] Ver detalles\n")

	return sb.String()
}

// renderResultsStep renderiza el paso de resultados
func (m Model) renderResultsStep() string {
	var sb strings.Builder

	sb.WriteString(titleStyle.Render("üìä RESULTADOS DEL ESCANEO"))
	sb.WriteString("\n\n")

	if m.scanResult == nil {
		sb.WriteString(errorStyle.Render("No hay resultados disponibles"))
		return sb.String()
	}

	// Resumen principal
	sb.WriteString("üìã RESUMEN EJECUTIVO:\n")
	sb.WriteString(strings.Repeat("‚ïê", 60) + "\n")

	protocol := "https://"
	if !m.useHTTPS {
		protocol = "http://"
	}

	sb.WriteString(fmt.Sprintf("üéØ URL Escaneada:    %s\n", protocol+m.url))
	sb.WriteString(fmt.Sprintf("üìÖ Fecha/Hora:       %s\n", m.scanResult.ScanDate.Format("2006-01-02 15:04:05")))
	sb.WriteString(fmt.Sprintf("‚è±Ô∏è  Duraci√≥n:         %v\n", m.scanResult.Duration.Round(time.Millisecond)))
	sb.WriteString(fmt.Sprintf("üîç Tests Ejecutados: %d\n", m.scanResult.TestsExecuted))
	sb.WriteString(fmt.Sprintf("‚úÖ Tests Pasados:    %s\n", successStyle.Render(fmt.Sprintf("%d", m.scanResult.TestsPassed))))
	sb.WriteString(fmt.Sprintf("‚ùå Tests Fallidos:   %s\n", errorStyle.Render(fmt.Sprintf("%d", m.scanResult.TestsFailed))))
	sb.WriteString(strings.Repeat("‚ïê", 60) + "\n\n")

	// Puntuaci√≥n de seguridad
	score := m.scanResult.SecurityScore.Value
	risk := m.scanResult.SecurityScore.Risk

	scoreStyle := successStyle
	if score < 7.0 {
		scoreStyle = warningStyle
	}
	if score < 4.0 {
		scoreStyle = errorStyle
	}

	sb.WriteString("üõ°Ô∏è  PUNTUACI√ìN DE SEGURIDAD:\n")
	sb.WriteString(strings.Repeat("‚îÄ", 30) + "\n")
	sb.WriteString(fmt.Sprintf("Puntuaci√≥n: %s/10\n", scoreStyle.Render(fmt.Sprintf("%.1f", score))))
	sb.WriteString(fmt.Sprintf("Nivel de Riesgo: %s\n\n", scoreStyle.Render(risk)))

	// Resultados resumidos por categor√≠a
	if len(m.scanResult.TestResults) > 0 {
		sb.WriteString("üìù RESULTADOS POR TEST:\n")
		sb.WriteString(strings.Repeat("‚îÄ", 40) + "\n")

		for _, result := range m.scanResult.TestResults {
			status := errorStyle.Render("‚ùå FALL√ì")
			if result.Status == "Passed" {
				status = successStyle.Render("‚úÖ PAS√ì")
			}

			sb.WriteString(fmt.Sprintf("%s %s\n", status, result.TestName))
			if result.Description != "" && result.Status != "Passed" {
				sb.WriteString(fmt.Sprintf("    %s\n", warningStyle.Render(result.Description)))
			}

			// Agregar detalle adicional cuando el test falla
			if result.Status == "Failed" && len(result.Evidence) > 0 {
				sb.WriteString("    üî¥ Detalles del fallo:\n")

				// Mostrar la primera evidencia como ejemplo
				evidence := result.Evidence[0]
				sb.WriteString(fmt.Sprintf("      üìù Tipo: %s\n", errorStyle.Render(evidence.Type)))
				sb.WriteString(fmt.Sprintf("      üí¨ Payload: %s\n", warningStyle.Render(evidence.Payload)))
				sb.WriteString(fmt.Sprintf("      üìû Respuesta: %s\n", normalStyle.Render(evidence.Response)))

				if len(result.Evidence) > 1 {
					sb.WriteString(fmt.Sprintf("      ‚ÑπÔ∏è  ... y %d evidencias m√°s (ver detalles completos)\n", len(result.Evidence)-1))
				}
				sb.WriteString("\n")
			} else if result.Status == "Failed" {
				// Fallback si no hay evidencias espec√≠ficas
				sb.WriteString("    üî¥ Ejemplos de lo que se detect√≥:\n")
				switch result.TestName {
				case "SQL Injection":
					sb.WriteString(fmt.Sprintf("      üí¨ Payload usado: %s\n", warningStyle.Render("' OR '1'='1")))
					sb.WriteString(fmt.Sprintf("      üìû Respuesta: %s\n", errorStyle.Render("Error SQL o comportamiento anormal")))
				case "Cross-Site Scripting":
					sb.WriteString(fmt.Sprintf("      üí¨ Payload usado: %s\n", warningStyle.Render("<script>alert('XSS')</script>")))
					sb.WriteString(fmt.Sprintf("      üìû Respuesta: %s\n", errorStyle.Render("Script reflejado sin sanitizaci√≥n")))
				case "Headers de Seguridad":
					sb.WriteString(fmt.Sprintf("      üí¨ Header faltante: %s\n", warningStyle.Render("X-Frame-Options")))
					sb.WriteString(fmt.Sprintf("      üìû Riesgo: %s\n", errorStyle.Render("Posible clickjacking")))
				default:
					sb.WriteString(fmt.Sprintf("      üìû Resultado: %s\n", errorStyle.Render("Vulnerabilidad detectada")))
				}
				sb.WriteString("\n")
			}
		}
		sb.WriteString("\n")
	}
	// Recomendaciones principales
	if len(m.scanResult.Recommendations) > 0 {
		sb.WriteString("üí° RECOMENDACIONES PRINCIPALES:\n")
		sb.WriteString(strings.Repeat("‚îÄ", 40) + "\n")
		maxRecs := min(5, len(m.scanResult.Recommendations))
		for i := 0; i < maxRecs; i++ {
			sb.WriteString(fmt.Sprintf("%d. %s\n", i+1, m.scanResult.Recommendations[i]))
		}
		if len(m.scanResult.Recommendations) > 5 {
			sb.WriteString(fmt.Sprintf("   ... y %d recomendaciones m√°s (ver detalles)\n", len(m.scanResult.Recommendations)-5))
		}
		sb.WriteString("\n")
	}

	sb.WriteString("üéÆ OPCIONES:\n")
	sb.WriteString("   [D/Enter] Ver detalles completos\n")
	sb.WriteString("   [R] Repetir escaneo\n")
	sb.WriteString("   [S] Guardar reporte\n")
	sb.WriteString("   [Backspace] Nuevo escaneo\n")
	sb.WriteString("   [Q/Esc] Salir\n")

	return sb.String()
}

// renderFooter renderiza el footer con ayuda
func (m Model) renderFooter() string {
	var help strings.Builder

	help.WriteString("üéÆ CONTROLES: ")

	switch m.state {
	case StateProtocol:
		help.WriteString("‚Üë‚Üì Navegar | Space Seleccionar | Enter Continuar | Q Salir")
	case StateURL:
		help.WriteString("Escribir URL | Enter Continuar | Esc Volver | Q Salir")
	case StateTests:
		help.WriteString("‚Üë‚Üì Navegar | PgUp/PgDn P√°gina | Space Seleccionar | A Todos | N Ninguno | R Recomendados | Enter Continuar")
	case StateFormat:
		help.WriteString("‚Üë‚Üì Navegar | Space Seleccionar | V Verbose | Enter Continuar")
	case StateConfirm:
		help.WriteString("‚Üë‚Üì Navegar | Space Seleccionar | Enter Confirmar | Esc Volver")
	case StateScanning:
		help.WriteString("Q Cancelar escaneo")
	case StateFinishing:
		help.WriteString("Generando reporte... Por favor espere")
	case StateResults:
		help.WriteString("D Detalles | R Repetir | S Guardar | Backspace Nuevo | Q Salir")
	}

	if m.verbose {
		help.WriteString(" | üîç VERBOSE ACTIVO")
	}

	footerStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#888888")).
		Background(lipgloss.Color("#1a1a1a")).
		Padding(0, 1)

	return footerStyle.Render(help.String())
}

// renderModal renderiza un modal sobre el contenido principal
func (m Model) renderModal(content string) string {
	// Crear el contenido del modal
	modalWidth := min(m.width-10, 100)
	modalHeight := min(m.height-10, 30)

	// Procesar el contenido para que quepa en el modal
	lines := strings.Split(m.modalContent, "\n")
	modalLines := []string{}

	for _, line := range lines {
		if len(line) <= modalWidth-4 {
			modalLines = append(modalLines, line)
		} else {
			// Partir l√≠neas largas
			for len(line) > modalWidth-4 {
				modalLines = append(modalLines, line[:modalWidth-4])
				line = line[modalWidth-4:]
			}
			if len(line) > 0 {
				modalLines = append(modalLines, line)
			}
		}

		if len(modalLines) >= modalHeight-4 {
			modalLines = append(modalLines, "... (contenido truncado)")
			break
		}
	}

	modalContent := strings.Join(modalLines, "\n")

	// Crear el modal
	modal := modalStyle.
		Width(modalWidth).
		Height(modalHeight).
		Render(fmt.Sprintf("%s\n\n%s\n\n%s",
			titleStyle.Render(m.modalTitle),
			modalContent,
			normalStyle.Render("Presione ESC o Q para cerrar")))

	// Posicionar el modal en el centro
	_ = (m.width - modalWidth) / 2   // modalX no se usa
	_ = (m.height - modalHeight) / 2 // modalY no se usa

	// Crear el overlay
	overlay := lipgloss.Place(m.width, m.height, lipgloss.Center, lipgloss.Center, modal)

	return overlay
}

// min retorna el menor de dos enteros
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// renderFinishingStep renderiza el paso de finalizaci√≥n con spinner
func (m Model) renderFinishingStep() string {
	var sb strings.Builder

	sb.WriteString(titleStyle.Render("üèÅ FINALIZANDO ESCANEO"))
	sb.WriteString("\n\n")

	protocol := "https://"
	if !m.useHTTPS {
		protocol = "http://"
	}

	sb.WriteString(fmt.Sprintf("üéØ URL Escaneada: %s\n\n", successStyle.Render(protocol+m.url)))

	// Barra de progreso al 100%
	barWidth := 50
	bar := strings.Repeat("‚ñà", barWidth)
	sb.WriteString(fmt.Sprintf("üìä Progreso: [%s] 100.0%%\n", bar))
	sb.WriteString(fmt.Sprintf("‚úÖ Tests completados: %d/%d\n\n", m.scanProgress.Total, m.scanProgress.Total))

	// Spinner animado y mensaje de finalizaci√≥n
	spinnerChars := []string{"‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß"}
	currentSpinner := spinnerChars[m.finishingSpinner%len(spinnerChars)]

	// Progreso de finalizaci√≥n m√°s granular
	finishingProgress := float64(m.finishingElapsed.Milliseconds()) / 800.0 // 800ms total
	if finishingProgress > 1.0 {
		finishingProgress = 1.0
	}

	// Barra de progreso de finalizaci√≥n
	finishBarWidth := 40
	finishFilled := int(finishingProgress * float64(finishBarWidth))
	finishBar := strings.Repeat("‚ñà", finishFilled) + strings.Repeat("‚ñë", finishBarWidth-finishFilled)

	sb.WriteString("üîÑ GENERANDO REPORTE FINAL:\n")
	sb.WriteString(strings.Repeat("‚îÄ", 70) + "\n")
	sb.WriteString(fmt.Sprintf("   %s %s\n",
		warningStyle.Render(currentSpinner),
		warningStyle.Render("Procesando resultados y generando reporte detallado...")))

	// Timer detallado con milisegundos
	elapsedMs := m.finishingElapsed.Milliseconds()
	sb.WriteString(fmt.Sprintf("   ‚è±Ô∏è  Tiempo transcurrido: %dms / 800ms\n", elapsedMs))
	sb.WriteString(fmt.Sprintf("   üìä Progreso: [%s] %.1f%%\n", finishBar, finishingProgress*100))

	sb.WriteString(strings.Repeat("‚îÄ", 70) + "\n\n")

	// Lista de tareas de finalizaci√≥n (ajustadas a 800ms)
	finishingTasks := []struct {
		name        string
		threshold   int64
		icon        string
		description string
	}{
		{"Compilando resultados", 100, "üìã", "Recopilando datos de todos los tests ejecutados"},
		{"Analizando vulnerabilidades", 300, "üîç", "Evaluando nivel de riesgo y criticidad"},
		{"Generando recomendaciones", 500, "üí°", "Creando gu√≠as espec√≠ficas de remediaci√≥n"},
		{"Formateando reporte", 700, "üìù", "Estructurando tabla ASCII con resultados"},
		{"Finalizando", 800, "‚ú®", "Preparando vista de resultados finales"},
	}

	sb.WriteString("üìã TAREAS DE FINALIZACI√ìN:\n")
	for i, task := range finishingTasks {
		if elapsedMs >= task.threshold {
			sb.WriteString(fmt.Sprintf("   ‚úÖ %s %s\n",
				task.icon,
				successStyle.Render(task.name)))
			if m.verbose && task.description != "" {
				sb.WriteString(fmt.Sprintf("      %s\n",
					normalStyle.Render("‚îî‚îÄ "+task.description)))
			}
		} else {
			// Esta es la tarea actual en progreso
			sb.WriteString(fmt.Sprintf("   %s %s %s\n",
				currentSpinner,
				task.icon,
				warningStyle.Render(task.name+" (en progreso...)")))
			if m.verbose && task.description != "" {
				sb.WriteString(fmt.Sprintf("      %s\n",
					normalStyle.Render("‚îî‚îÄ "+task.description)))
			}

			// Mostrar las tareas restantes como pendientes
			for j := i + 1; j < len(finishingTasks); j++ {
				nextTask := finishingTasks[j]
				sb.WriteString(fmt.Sprintf("   ‚è≥ %s %s\n",
					nextTask.icon,
					normalStyle.Render(nextTask.name+" (pendiente)")))
			}
			break
		}
	}

	// Estimaci√≥n de tiempo restante
	if finishingProgress < 1.0 {
		remainingMs := 800 - elapsedMs
		if remainingMs > 0 {
			sb.WriteString(fmt.Sprintf("\n‚è∞ Tiempo estimado restante: ~%dms\n", remainingMs))
		}
	}

	return sb.String()
}

// renderTestsInColumns renderiza los tests en formato de columnas compactas con scroll
func (m Model) renderTestsInColumns() string {
	var sb strings.Builder

	// Asegurar que el modelo tenga scroll configurado
	model := m.adjustScrollPosition()

	// Configuraci√≥n de visualizaci√≥n
	testsToShow := model.testsPerPage
	if testsToShow == 0 {
		testsToShow = max(5, model.height-25) // Fallback
	}

	// Determinar qu√© tests mostrar basado en el scroll
	startIndex := model.scrollOffset
	endIndex := min(len(model.tests), startIndex+testsToShow)

	// Mostrar indicador de scroll si es necesario
	if model.showScrollbar && len(model.tests) > testsToShow {
		totalTests := len(model.tests)
		currentPos := startIndex + 1
		endPos := min(totalTests, startIndex+testsToShow)

		sb.WriteString(fmt.Sprintf("üìÑ Mostrando tests %d-%d de %d total",
			currentPos, endPos, totalTests))

		// Barra de scroll visual
		scrollBarWidth := 20
		scrollProgress := float64(startIndex) / float64(totalTests-testsToShow)
		scrollPos := int(scrollProgress * float64(scrollBarWidth))

		scrollBar := strings.Repeat("‚îÄ", scrollPos) + "‚ñà" + strings.Repeat("‚îÄ", scrollBarWidth-scrollPos)
		sb.WriteString(fmt.Sprintf(" [%s]\n", scrollBar))
		sb.WriteString("\n")
	}

	// Configuraci√≥n de columnas
	columnsCount := 2       // Reducir a 2 columnas para m√°s espacio
	maxTestNameLength := 35 // Aumentar longitud del nombre

	// Crear una lista simple de tests a mostrar
	visibleTests := model.tests[startIndex:endIndex]

	// Renderizar en columnas simples
	for i := 0; i < len(visibleTests); i += columnsCount {
		for col := 0; col < columnsCount; col++ {
			if i+col >= len(visibleTests) {
				break
			}

			test := visibleTests[i+col]
			globalIndex := startIndex + i + col // √çndice real en la lista completa

			// Crear el contenido del test
			marker := "‚òê"
			if test.Selected {
				marker = "‚òë"
			}

			recommended := ""
			if test.Recommended {
				recommended = " ‚≠ê"
			}

			// Truncar nombre si es muy largo
			testName := test.Name
			if len(testName) > maxTestNameLength {
				testName = testName[:maxTestNameLength-3] + "..."
			}

			// Determinar estilo
			style := normalStyle
			prefix := " "
			if globalIndex == model.cursor {
				style = focusedStyle
				prefix = "‚Üí"
			}

			// Crear la l√≠nea del test con padding fijo
			testLine := fmt.Sprintf("%s%s %s%s", prefix, marker, testName, recommended)
			paddedLine := fmt.Sprintf("%-50s", testLine) // Padding fijo de 50 caracteres

			sb.WriteString(style.Render(paddedLine))

			// Agregar separador entre columnas (excepto en la √∫ltima)
			if col < columnsCount-1 && i+col+1 < len(visibleTests) {
				sb.WriteString(" | ")
			}
		}
		sb.WriteString("\n")
	}

	// Mostrar descripci√≥n del test enfocado
	if model.cursor >= 0 && model.cursor < len(model.tests) {
		focusedTest := model.tests[model.cursor]
		sb.WriteString("\n")
		sb.WriteString(warningStyle.Render("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
		sb.WriteString("\n")
		sb.WriteString(warningStyle.Render(fmt.Sprintf("üìã %s", focusedTest.Description)))
		sb.WriteString("\n")
		sb.WriteString(warningStyle.Render(fmt.Sprintf("üè∑Ô∏è Categor√≠a: %s (%s)", focusedTest.Category, getCategoryDescription(focusedTest.Category))))
		sb.WriteString("\n")
		sb.WriteString(warningStyle.Render("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
		sb.WriteString("\n")
	}

	// Mostrar controles de scroll si es necesario
	if model.showScrollbar {
		sb.WriteString("\nüí° NAVEGACI√ìN: [‚Üë‚Üì] Test anterior/siguiente | [PgUp/PgDn] P√°gina anterior/siguiente | [Home/End] Inicio/Final\n")
	}

	return sb.String()
}
